# THIS FILE IS AUTOGENERATED, DO NOT EDIT!!!
#
# Cambalache Base Object wrappers
#
# Copyright (C) 2021  Juan Pablo Ugarte - All Rights Reserved
#
# Unauthorized copying of this file, via any medium is strictly prohibited.
#

import gi
from gi.repository import GObject
from .cmb_base import *


class CmbPropertyInfo(CmbBase):
    owner_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    property_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    type_id = GObject.Property(type=str)
    writable = GObject.Property(type=bool, default = False)
    construct_only = GObject.Property(type=bool, default = False)
    default_value = GObject.Property(type=str)
    minimum = GObject.Property(type=str)
    maximum = GObject.Property(type=str)
    version = GObject.Property(type=str)
    deprecated_version = GObject.Property(type=str)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @classmethod
    def from_row(cls, project, owner_id, property_id, type_id, writable, construct_only, default_value, minimum, maximum, version, deprecated_version):
        return cls(project=project,
                   owner_id=owner_id,
                   property_id=property_id,
                   type_id=type_id,
                   writable=writable,
                   construct_only=construct_only,
                   default_value=default_value,
                   minimum=minimum,
                   maximum=maximum,
                   version=version,
                   deprecated_version=deprecated_version)


class CmbSignalInfo(CmbBase):
    owner_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    signal_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    version = GObject.Property(type=str)
    deprecated_version = GObject.Property(type=str)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @classmethod
    def from_row(cls, project, owner_id, signal_id, version, deprecated_version):
        return cls(project=project,
                   owner_id=owner_id,
                   signal_id=signal_id,
                   version=version,
                   deprecated_version=deprecated_version)


class CmbBaseTypeInfo(CmbBase):
    type_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    parent_id = GObject.Property(type=str)
    library_id = GObject.Property(type=str)
    get_type = GObject.Property(type=str)
    version = GObject.Property(type=str)
    deprecated_version = GObject.Property(type=str)
    abstract = GObject.Property(type=bool, default = False)
    layout = GObject.Property(type=str)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @classmethod
    def from_row(cls, project, type_id, parent_id, library_id, get_type, version, deprecated_version, abstract, layout):
        return cls(project=project,
                   type_id=type_id,
                   parent_id=parent_id,
                   library_id=library_id,
                   get_type=get_type,
                   version=version,
                   deprecated_version=deprecated_version,
                   abstract=abstract,
                   layout=layout)


class CmbBaseUI(CmbBase):
    ui_id = GObject.Property(type=int, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    template_id = GObject.Property(type=int)
    name = GObject.Property(type=str)
    filename = GObject.Property(type=str)
    description = GObject.Property(type=str)
    copyright = GObject.Property(type=str)
    authors = GObject.Property(type=str)
    license_id = GObject.Property(type=str)
    translation_domain = GObject.Property(type=str)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @classmethod
    def from_row(cls, project, ui_id, template_id, name, filename, description, copyright, authors, license_id, translation_domain):
        return cls(project=project,
                   ui_id=ui_id,
                   template_id=template_id,
                   name=name,
                   filename=filename,
                   description=description,
                   copyright=copyright,
                   authors=authors,
                   license_id=license_id,
                   translation_domain=translation_domain)


class CmbBaseProperty(CmbBase):
    ui_id = GObject.Property(type=int, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    object_id = GObject.Property(type=int, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    owner_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    property_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    value = GObject.Property(type=str)
    translatable = GObject.Property(type=bool, default = False)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @classmethod
    def from_row(cls, project, ui_id, object_id, owner_id, property_id, value, translatable):
        return cls(project=project,
                   ui_id=ui_id,
                   object_id=object_id,
                   owner_id=owner_id,
                   property_id=property_id,
                   value=value,
                   translatable=translatable)


class CmbBaseLayoutProperty(CmbBase):
    ui_id = GObject.Property(type=int, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    object_id = GObject.Property(type=int, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    child_id = GObject.Property(type=int, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    owner_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    property_id = GObject.Property(type=str, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    value = GObject.Property(type=str)
    translatable = GObject.Property(type=bool, default = False)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @classmethod
    def from_row(cls, project, ui_id, object_id, child_id, owner_id, property_id, value, translatable):
        return cls(project=project,
                   ui_id=ui_id,
                   object_id=object_id,
                   child_id=child_id,
                   owner_id=owner_id,
                   property_id=property_id,
                   value=value,
                   translatable=translatable)


class CmbSignal(CmbBase):
    ui_id = GObject.Property(type=int)
    object_id = GObject.Property(type=int)
    owner_id = GObject.Property(type=str)
    signal_id = GObject.Property(type=str)
    handler = GObject.Property(type=str)
    detail = GObject.Property(type=str)
    user_data = GObject.Property(type=int)
    swap = GObject.Property(type=bool, default = False)
    after = GObject.Property(type=bool, default = False)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @classmethod
    def from_row(cls, project, ui_id, object_id, owner_id, signal_id, handler, detail, user_data, swap, after):
        return cls(project=project,
                   ui_id=ui_id,
                   object_id=object_id,
                   owner_id=owner_id,
                   signal_id=signal_id,
                   handler=handler,
                   detail=detail,
                   user_data=user_data,
                   swap=swap,
                   after=after)


class CmbBaseObject(CmbBase):
    ui_id = GObject.Property(type=int, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    object_id = GObject.Property(type=int, flags = GObject.ParamFlags.READWRITE | GObject.ParamFlags.CONSTRUCT_ONLY)
    type_id = GObject.Property(type=str)
    name = GObject.Property(type=str)
    parent_id = GObject.Property(type=int)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @classmethod
    def from_row(cls, project, ui_id, object_id, type_id, name, parent_id):
        return cls(project=project,
                   ui_id=ui_id,
                   object_id=object_id,
                   type_id=type_id,
                   name=name,
                   parent_id=parent_id)
